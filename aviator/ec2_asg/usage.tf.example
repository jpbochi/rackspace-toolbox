module "ec2_asg" {
  source    = "<_path_/_to_/_module_/>/ec2_asg/"
  ec2_os    = "rhel7"
  asg_count = "3"

  load_balancer_names                    = ["${aws_elb.my_elb.name}"]
  cw_low_operator                        = "LessThanThreshold"
  instance_role_managed_policy_arns      = ["${aws_iam_policy.test_policy_1.arn}", "${aws_iam_policy.test_policy_2.arn}"]
  instance_role_managed_policy_arn_count = "2"
  environment                            = "Development"
  ssm_association_refresh_rate           = "rate(1 day)"
  cw_scaling_metric                      = "CPUUtilization"
  enable_ebs_optimization                = "False"
  scaling_min                            = "1"
  cloudwatch_log_retention               = "30"
  secondary_ebs_volume_size              = "60"
  enable_rackspace_ticket                = "False"
  cw_high_period                         = "60"
  enable_scaling_notification            = true
  subnets                                = ["${aws_subnet.my_subnet.*.id}"]
  secondary_ebs_volume_iops              = "0"
  ec2_scale_down_adjustment              = "1"
  image_id                               = "ami-7c491f05"
  cw_low_period                          = "300"
  key_pair                               = "mcardenas_testing"
  tenancy                                = "default"
  backup_tag_value                       = "False"
  ec2_scale_down_cool_down               = "60"
  instance_type                          = "t2.micro"

  # If ALB target groups are being used, one can specify ARNs like the commented line below.
  #target_group_arns                      = ["${aws_lb_target_group.my_tg.arn}"]
  secondary_ebs_volume_type = "gp2"

  ec2_scale_up_adjustment    = "1"
  cw_high_threshold          = "60"
  scaling_notification_topic = "${aws_sns_topic.my_test_sns.arn}"
  cw_low_threshold           = "30"
  resource_name              = "my_test_instance"
  ec2_scale_up_cool_down     = "60"
  ssm_patching_group         = "MyPatchGroup1"
  health_check_grace_period  = "300"
  security_group_list        = ["${aws_security_group.my_sg.*.id}"]
  perform_ssm_inventory_tag  = "True"
  terminated_instances       = "30"
  health_check_type          = "EC2"
  cw_low_evaluations         = "3"
  cw_high_evaluations        = "3"
  primary_ebs_volume_iops    = "0"
  detailed_monitoring        = "True"
  primary_ebs_volume_type    = "gp2"
  primary_ebs_volume_size    = "60"
  scaling_max                = "2"
  cw_high_operator           = "GreaterThanThreshold"
  encrypt_ebs_volume         = "False"
  install_codedeploy_agent   = "False"

  addtional_ssm_bootstrap_list = [
    {
      ssm_add_step = <<EOF
      {
        "action": "aws:runDocument",
        "inputs": {
          "documentPath": "arn:aws:ssm:${data.aws_region.current_region.name}:507897595701:document/Rack-Install_Package",
          "documentParameters": {
            "Packages": "bind bindutils"
          },
          "documentType": "SSMDocument"
        },
        "name": "InstallBindAndTools",
        "timeoutSeconds": 300
      }
EOF
    },
    {
      ssm_add_step = <<EOF
      {
        "action": "aws:runDocument",
        "inputs": {
          "documentPath": "AWS-RunShellScript",
          "documentParameters": {
            "commands": ["touch /tmp/myfile"]
          },
          "documentType": "SSMDocument"
        },
        "name": "CreateFile",
        "timeoutSeconds": 300
      }
EOF
    },
  ]

  addtional_ssm_bootstrap_step_count = "2"

  additional_tags = [
    {
      key                 = "MyTag1"
      value               = "Myvalue1"
      propagate_at_launch = true
    },
    {
      key                 = "MyTag2"
      value               = "Myvalue2"
      propagate_at_launch = true
    },
    {
      key                 = "MyTag3"
      value               = "Myvalue3"
      propagate_at_launch = true
    },
  ]

  encrypt_secondary_ebs_volume  = "False"
  asg_wait_for_capacity_timeout = "10m"
  asg_wait_for_elb_capacity     = ""
}
